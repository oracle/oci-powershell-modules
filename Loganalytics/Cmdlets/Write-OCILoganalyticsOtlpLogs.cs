/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20200601
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.LoganalyticsService.Requests;
using Oci.LoganalyticsService.Responses;
using Oci.LoganalyticsService.Models;
using Oci.Common.Model;

namespace Oci.LoganalyticsService.Cmdlets
{
    [Cmdlet("Write", "OCILoganalyticsOtlpLogs")]
    [OutputType(new System.Type[] { typeof(void), typeof(Oci.LoganalyticsService.Responses.UploadOtlpLogsResponse) })]
    public class WriteOCILoganalyticsOtlpLogs : OCILogAnalyticsCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The Logging Analytics namespace used for the request.")]
        public string NamespaceName { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The log group OCID to which the log data in this upload will be mapped to.")]
        public string OpcMetaLoggrpid { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Accepts log data in OTLP JSON-encoded Protobuf format. Sample format: https://github.com/open-telemetry/opentelemetry-proto/blob/v1.3.1/examples/logs.json", ParameterSetName = FromStreamSet)]
        public System.IO.Stream UploadOtlpLogsDetails { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Use this parameter to provide the file location from where the input stream to be read. Accepts log data in OTLP JSON-encoded Protobuf format. Sample format: https://github.com/open-telemetry/opentelemetry-proto/blob/v1.3.1/examples/logs.json", ParameterSetName = FromFileSet)]
        public String UploadOtlpLogsDetailsFromFile { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The client request ID for tracing.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The log set that gets associated with the uploaded logs.")]
        public string LogSet { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The content type of the log data.")]
        public string ContentType { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A token that uniquely identifies a request so it can be retried in case of a timeout or server error without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations. For example, if a resource has been deleted and purged from the system, then a retry of the original creation request might be rejected.")]
        public string OpcRetryToken { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Metadata key and value pairs separated by a semicolon. Example k1:v1;k2:v2;k3:v3")]
        public string OpcMetaProperties { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is ""100-Continue"" (case-insensitive).")]
        public string Expect { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            UploadOtlpLogsRequest request;

            if (ParameterSetName.Equals(FromFileSet))
            {
                UploadOtlpLogsDetails = System.IO.File.OpenRead(GetAbsoluteFilePath(UploadOtlpLogsDetailsFromFile));
            }
            

            try
            {
                request = new UploadOtlpLogsRequest
                {
                    NamespaceName = NamespaceName,
                    OpcMetaLoggrpid = OpcMetaLoggrpid,
                    UploadOtlpLogsDetails = UploadOtlpLogsDetails,
                    OpcRequestId = OpcRequestId,
                    LogSet = LogSet,
                    ContentType = ContentType,
                    OpcRetryToken = OpcRetryToken,
                    OpcMetaProperties = OpcMetaProperties,
                    Expect = Expect
                };

                response = client.UploadOtlpLogs(request).GetAwaiter().GetResult();
                WriteOutput(response);
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private UploadOtlpLogsResponse response;
        private const string FromFileSet = "FromFile";
        private const string FromStreamSet = "FromStream";
    }
}
