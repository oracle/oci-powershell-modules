/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20181231
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using Oci.CimsService.Requests;
using Oci.CimsService.Responses;
using Oci.CimsService.Models;

namespace Oci.CimsService.Cmdlets
{
    [Cmdlet("Get", "OCIIncidentsList")]
    [OutputType(new System.Type[] { typeof(Oci.CimsService.Models.IncidentSummary), typeof(Oci.CimsService.Responses.ListIncidentsResponse) })]
    public class GetOCIIncidentsList : OCIIncidentCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Customer Support Identifier of the support account")]
        public string Csi { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Tenancy Ocid")]
        public string CompartmentId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"User OCID for IDCS users that have a shadow in OCI")]
        public string Ocid { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Limit query for number of returned results", ParameterSetName = LimitSet)]
        public System.Nullable<int> Limit { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The key to sort the returned items by")]
        public System.Nullable<Oci.CimsService.Models.SortBy> SortBy { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The order in which to sort the results")]
        public System.Nullable<Oci.CimsService.Models.SortOrder> SortOrder { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The order in which to sort the results")]
        public System.Nullable<Oci.CimsService.Models.LifecycleState> LifecycleState { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Pagination for Incident list")]
        public string Page { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Unique Header for request id")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Fetches all pages of results.", ParameterSetName = AllPageSet)]
        public SwitchParameter All { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            ListIncidentsRequest request;

            try
            {
                request = new ListIncidentsRequest
                {
                    Csi = Csi,
                    CompartmentId = CompartmentId,
                    Ocid = Ocid,
                    Limit = Limit,
                    SortBy = SortBy,
                    SortOrder = SortOrder,
                    LifecycleState = LifecycleState,
                    Page = Page,
                    OpcRequestId = OpcRequestId
                };
                IEnumerable<ListIncidentsResponse> responses = GetRequestDelegate().Invoke(request);
                foreach (var item in responses)
                {
                    response = item;
                    WriteOutput(response, response.Items, true);
                }
                FinishProcessing(response);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private RequestDelegate GetRequestDelegate()
        {
            IEnumerable<ListIncidentsResponse> DefaultRequest(ListIncidentsRequest request) => Enumerable.Repeat(client.ListIncidents(request).GetAwaiter().GetResult(), 1);
            if (ParameterSetName.Equals(AllPageSet))
            {
                return req => client.Paginators.ListIncidentsResponseEnumerator(req);
            }
            return DefaultRequest;
        }

        private ListIncidentsResponse response;
        private delegate IEnumerable<ListIncidentsResponse> RequestDelegate(ListIncidentsRequest request);
        private const string AllPageSet = "AllPages";
        private const string LimitSet = "Limit";
    }
}
