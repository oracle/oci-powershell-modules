/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20160918
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using Oci.IdentityService.Requests;
using Oci.IdentityService.Responses;
using Oci.IdentityService.Models;

namespace Oci.IdentityService.Cmdlets
{
    [Cmdlet("Get", "OCIIdentityBulkActionResourceTypesList")]
    [OutputType(new System.Type[] { typeof(Oci.IdentityService.Models.BulkActionResourceTypeCollection), typeof(Oci.IdentityService.Responses.ListBulkActionResourceTypesResponse) })]
    public class GetOCIIdentityBulkActionResourceTypesList : OCIIdentityCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The type of bulk action.")]
        public System.Nullable<Oci.IdentityService.Requests.ListBulkActionResourceTypesRequest.BulkActionTypeEnum> BulkActionType { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The value of the `opc-next-page` response header from the previous ""List"" call.")]
        public string Page { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The maximum number of items to return in a paginated ""List"" call.", ParameterSetName = LimitSet)]
        public System.Nullable<int> Limit { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Fetches all pages of results.", ParameterSetName = AllPageSet)]
        public SwitchParameter All { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            ListBulkActionResourceTypesRequest request;

            try
            {
                request = new ListBulkActionResourceTypesRequest
                {
                    BulkActionType = BulkActionType,
                    Page = Page,
                    Limit = Limit
                };
                IEnumerable<ListBulkActionResourceTypesResponse> responses = GetRequestDelegate().Invoke(request);
                foreach (var item in responses)
                {
                    response = item;
                    WriteOutput(response, response.BulkActionResourceTypeCollection, true);
                }
                FinishProcessing(response);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private RequestDelegate GetRequestDelegate()
        {
            IEnumerable<ListBulkActionResourceTypesResponse> DefaultRequest(ListBulkActionResourceTypesRequest request) => Enumerable.Repeat(client.ListBulkActionResourceTypes(request).GetAwaiter().GetResult(), 1);
            if (ParameterSetName.Equals(AllPageSet))
            {
                return req => client.Paginators.ListBulkActionResourceTypesResponseEnumerator(req);
            }
            return DefaultRequest;
        }

        private ListBulkActionResourceTypesResponse response;
        private delegate IEnumerable<ListBulkActionResourceTypesResponse> RequestDelegate(ListBulkActionResourceTypesRequest request);
        private const string AllPageSet = "AllPages";
        private const string LimitSet = "Limit";
    }
}
