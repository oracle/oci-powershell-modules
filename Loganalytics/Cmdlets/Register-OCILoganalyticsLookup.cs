/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20200601
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.LoganalyticsService.Requests;
using Oci.LoganalyticsService.Responses;
using Oci.LoganalyticsService.Models;
using Oci.Common.Model;

namespace Oci.LoganalyticsService.Cmdlets
{
    [Cmdlet("Register", "OCILoganalyticsLookup")]
    [OutputType(new System.Type[] { typeof(Oci.LoganalyticsService.Models.LogAnalyticsLookup), typeof(Oci.LoganalyticsService.Responses.RegisterLookupResponse) })]
    public class RegisterOCILoganalyticsLookup : OCILogAnalyticsCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The Logging Analytics namespace used for the request.")]
        public string NamespaceName { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The lookup type.  Valid values are Lookup, Dictionary or Module.")]
        public System.Nullable<Oci.LoganalyticsService.Requests.RegisterLookupRequest.TypeEnum> Type { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The lookup content to be created, with or without tags. The following formats are supported as binary data:   1. If there are no tags: file containing the lookup content.   2. If there are tags: JSON file containing the lookup content and tags.", ParameterSetName = FromStreamSet)]
        public System.IO.Stream RegisterLookupContentFileBody { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Use this parameter to provide the file location from where the input stream to be read. The lookup content to be created, with or without tags. The following formats are supported as binary data:   1. If there are no tags: file containing the lookup content.   2. If there are tags: JSON file containing the lookup content and tags.", ParameterSetName = FromFileSet)]
        public String RegisterLookupContentFileBodyFromFile { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A filter to return only log analytics entities whose name matches the entire name given. The match is case-insensitive.")]
        public string Name { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The description for a created lookup.")]
        public string Description { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The character encoding of the uploaded file.")]
        public string CharEncoding { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A flag indicating whether or not the new lookup should be hidden.")]
        public System.Nullable<bool> IsHidden { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A token that uniquely identifies a request so it can be retried in case of a timeout or server error without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations. For example, if a resource has been deleted and purged from the system, then a retry of the original creation request might be rejected.")]
        public string OpcRetryToken { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The client request ID for tracing.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is ""100-Continue"" (case-insensitive).")]
        public string Expect { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The compartment id")]
        public string CompartmentId { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            RegisterLookupRequest request;

            if (ParameterSetName.Equals(FromFileSet))
            {
                RegisterLookupContentFileBody = System.IO.File.OpenRead(GetAbsoluteFilePath(RegisterLookupContentFileBodyFromFile));
            }
            

            try
            {
                request = new RegisterLookupRequest
                {
                    NamespaceName = NamespaceName,
                    Type = Type,
                    RegisterLookupContentFileBody = RegisterLookupContentFileBody,
                    Name = Name,
                    Description = Description,
                    CharEncoding = CharEncoding,
                    IsHidden = IsHidden,
                    OpcRetryToken = OpcRetryToken,
                    OpcRequestId = OpcRequestId,
                    Expect = Expect,
                    CompartmentId = CompartmentId
                };

                response = client.RegisterLookup(request).GetAwaiter().GetResult();
                WriteOutput(response, response.LogAnalyticsLookup);
                FinishProcessing(response);
            }
            catch (OciException ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private RegisterLookupResponse response;
        private const string FromFileSet = "FromFile";
        private const string FromStreamSet = "FromStream";
    }
}
