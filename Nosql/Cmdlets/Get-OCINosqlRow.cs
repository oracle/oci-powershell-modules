/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20190828
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.NosqlService.Requests;
using Oci.NosqlService.Responses;
using Oci.NosqlService.Models;

namespace Oci.NosqlService.Cmdlets
{
    [Cmdlet("Get", "OCINosqlRow")]
    [OutputType(new System.Type[] { typeof(Oci.NosqlService.Models.Row), typeof(Oci.NosqlService.Responses.GetRowResponse) })]
    public class GetOCINosqlRow : OCINosqlCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"A table name within the compartment, or a table OCID.")]
        public string TableNameOrId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"An array of strings, each of the format ""column-name:value"", representing the primary key of the row.")]
        public System.Collections.Generic.List<string> Key { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The ID of a table's compartment. When a table is identified by name, the compartmentId is often needed to provide context for interpreting the name.")]
        public string CompartmentId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Consistency requirement for a read operation.")]
        public System.Nullable<Oci.NosqlService.Requests.GetRowRequest.ConsistencyEnum> Consistency { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Timeout setting for this operation.")]
        public System.Nullable<int> TimeoutInMs { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The client request ID for tracing.")]
        public string OpcRequestId { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            GetRowRequest request;

            try
            {
                request = new GetRowRequest
                {
                    TableNameOrId = TableNameOrId,
                    Key = Key,
                    CompartmentId = CompartmentId,
                    Consistency = Consistency,
                    TimeoutInMs = TimeoutInMs,
                    OpcRequestId = OpcRequestId
                };

                response = client.GetRow(request).GetAwaiter().GetResult();
                WriteOutput(response, response.Row);
                FinishProcessing(response);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private GetRowResponse response;
    }
}
