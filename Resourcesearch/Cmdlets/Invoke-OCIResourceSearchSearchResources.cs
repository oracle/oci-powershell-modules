/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20180409
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.ResourcesearchService.Requests;
using Oci.ResourcesearchService.Responses;
using Oci.ResourcesearchService.Models;

namespace Oci.ResourcesearchService.Cmdlets
{
    [Cmdlet("Invoke", "OCIResourceSearchSearchResources")]
    [OutputType(new System.Type[] { typeof(Oci.ResourcesearchService.Models.ResourceSummaryCollection), typeof(Oci.ResourcesearchService.Responses.SearchResourcesResponse) })]
    public class InvokeOCIResourceSearchSearchResources : OCIResourceSearchCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Request parameters that describe query criteria. This parameter also accepts subtypes <Oci.ResourcesearchService.Models.StructuredSearchDetails>, <Oci.ResourcesearchService.Models.FreeTextSearchDetails> of type <Oci.ResourcesearchService.Models.SearchDetails>.")]
        public SearchDetails SearchDetails { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The maximum number of items to return. The value must be between 1 and 1000.")]
        public System.Nullable<int> Limit { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The page at which to start retrieving results.")]
        public string Page { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the complete request ID.")]
        public string OpcRequestId { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            SearchResourcesRequest request;

            try
            {
                request = new SearchResourcesRequest
                {
                    SearchDetails = SearchDetails,
                    Limit = Limit,
                    Page = Page,
                    OpcRequestId = OpcRequestId
                };

                response = client.SearchResources(request).GetAwaiter().GetResult();
                WriteOutput(response, response.ResourceSummaryCollection);
                FinishProcessing(response);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private SearchResourcesResponse response;
    }
}
