/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20190828
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.NosqlService.Requests;
using Oci.NosqlService.Responses;
using Oci.NosqlService.Models;

namespace Oci.NosqlService.Cmdlets
{
    [Cmdlet("Remove", "OCINosqlRow", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.High)]
    [OutputType(new System.Type[] { typeof(Oci.NosqlService.Models.DeleteRowResult), typeof(Oci.NosqlService.Responses.DeleteRowResponse) })]
    public class RemoveOCINosqlRow : OCINosqlCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"A table name within the compartment, or a table OCID.")]
        public string TableNameOrId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"An array of strings, each of the format ""column-name:value"", representing the primary key of the row.")]
        public System.Collections.Generic.List<string> Key { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The ID of a table's compartment. When a table is identified by name, the compartmentId is often needed to provide context for interpreting the name.")]
        public string CompartmentId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"If true, and the operation fails due to an option setting (ifVersion et al), then the existing row will be returned.")]
        public System.Nullable<bool> IsGetReturnRow { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Timeout setting for this operation.")]
        public System.Nullable<int> TimeoutInMs { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"For optimistic concurrency control. In the PUT or DELETE call for a resource, set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.")]
        public string IfMatch { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The client request ID for tracing.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = "Ignore confirmation and force the Cmdlet to complete action.")]
        public SwitchParameter Force { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();

            if (!ConfirmDelete("OCINosqlRow", "Remove"))
            {
               return;
            }

            DeleteRowRequest request;

            try
            {
                request = new DeleteRowRequest
                {
                    TableNameOrId = TableNameOrId,
                    Key = Key,
                    CompartmentId = CompartmentId,
                    IsGetReturnRow = IsGetReturnRow,
                    TimeoutInMs = TimeoutInMs,
                    IfMatch = IfMatch,
                    OpcRequestId = OpcRequestId
                };

                response = client.DeleteRow(request).GetAwaiter().GetResult();
                WriteOutput(response, response.DeleteRowResult);
                FinishProcessing(response);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private DeleteRowResponse response;
    }
}
