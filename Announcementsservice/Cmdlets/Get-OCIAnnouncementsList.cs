/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 0.0.1
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using Oci.AnnouncementsService.Requests;
using Oci.AnnouncementsService.Responses;
using Oci.AnnouncementsService.Models;

namespace Oci.AnnouncementsService.Cmdlets
{
    [Cmdlet("Get", "OCIAnnouncementsList")]
    [OutputType(new System.Type[] { typeof(Oci.AnnouncementsService.Models.AnnouncementsCollection), typeof(Oci.AnnouncementsService.Responses.ListAnnouncementsResponse) })]
    public class GetOCIAnnouncementsList : OCIAnnouncementCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The OCID of the compartment. Because announcements are specific to a tenancy, this is the OCID of the root compartment.")]
        public string CompartmentId { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The maximum number of items to return in a paginated ""List"" call.", ParameterSetName = LimitSet)]
        public System.Nullable<int> Limit { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The value of the `opc-next-page` response header from the previous ""List"" call.")]
        public string Page { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The type of announcement.")]
        public string AnnouncementType { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The announcement's current lifecycle state.")]
        public System.Nullable<Oci.AnnouncementsService.Requests.ListAnnouncementsRequest.LifecycleStateEnum> LifecycleState { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"Whether the announcement is displayed as a console banner.")]
        public System.Nullable<bool> IsBanner { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The criteria to sort by. You can specify only one sort order.")]
        public System.Nullable<Oci.AnnouncementsService.Requests.ListAnnouncementsRequest.SortByEnum> SortBy { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The sort order to use. (Sorting by `announcementType` orders the announcements list according to importance.)")]
        public System.Nullable<Oci.AnnouncementsService.Requests.ListAnnouncementsRequest.SortOrderEnum> SortOrder { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The boundary for the earliest `timeOneValue` date on announcements that you want to see.")]
        public System.Nullable<System.DateTime> TimeOneEarliestTime { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The boundary for the latest `timeOneValue` date on announcements that you want to see.")]
        public System.Nullable<System.DateTime> TimeOneLatestTime { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = @"The unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the complete request ID.")]
        public string OpcRequestId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"Fetches all pages of results.", ParameterSetName = AllPageSet)]
        public SwitchParameter All { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            ListAnnouncementsRequest request;

            try
            {
                request = new ListAnnouncementsRequest
                {
                    CompartmentId = CompartmentId,
                    Limit = Limit,
                    Page = Page,
                    AnnouncementType = AnnouncementType,
                    LifecycleState = LifecycleState,
                    IsBanner = IsBanner,
                    SortBy = SortBy,
                    SortOrder = SortOrder,
                    TimeOneEarliestTime = TimeOneEarliestTime,
                    TimeOneLatestTime = TimeOneLatestTime,
                    OpcRequestId = OpcRequestId
                };
                IEnumerable<ListAnnouncementsResponse> responses = GetRequestDelegate().Invoke(request);
                foreach (var item in responses)
                {
                    response = item;
                    WriteOutput(response, response.AnnouncementsCollection, true);
                }
                FinishProcessing(response);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private RequestDelegate GetRequestDelegate()
        {
            IEnumerable<ListAnnouncementsResponse> DefaultRequest(ListAnnouncementsRequest request) => Enumerable.Repeat(client.ListAnnouncements(request).GetAwaiter().GetResult(), 1);
            if (ParameterSetName.Equals(AllPageSet))
            {
                return req => client.Paginators.ListAnnouncementsResponseEnumerator(req);
            }
            return DefaultRequest;
        }

        private ListAnnouncementsResponse response;
        private delegate IEnumerable<ListAnnouncementsResponse> RequestDelegate(ListAnnouncementsRequest request);
        private const string AllPageSet = "AllPages";
        private const string LimitSet = "Limit";
    }
}
