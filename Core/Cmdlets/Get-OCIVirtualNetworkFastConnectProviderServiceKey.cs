/*
 * NOTE: Generated using OracleSDKGenerator, API Version: 20160918
 * DO NOT EDIT this file manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

using System;
using System.Management.Automation;
using Oci.CoreService.Requests;
using Oci.CoreService.Responses;
using Oci.CoreService.Models;

namespace Oci.CoreService.Cmdlets
{
    [Cmdlet("Get", "OCIVirtualNetworkFastConnectProviderServiceKey")]
    [OutputType(new System.Type[] { typeof(Oci.CoreService.Models.FastConnectProviderServiceKey), typeof(Oci.CoreService.Responses.GetFastConnectProviderServiceKeyResponse) })]
    public class GetOCIVirtualNetworkFastConnectProviderServiceKey : OCIVirtualNetworkCmdlet
    {
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The OCID of the provider service.")]
        public string ProviderServiceId { get; set; }

        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = @"The provider service key that the provider gives you when you set up a virtual circuit connection from the provider to Oracle Cloud Infrastructure. You can set up that connection and get your provider service key at the provider's website or portal. For the portal location, see the `description` attribute of the FastConnectProviderService.")]
        public string ProviderServiceKeyName { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            GetFastConnectProviderServiceKeyRequest request;

            try
            {
                request = new GetFastConnectProviderServiceKeyRequest
                {
                    ProviderServiceId = ProviderServiceId,
                    ProviderServiceKeyName = ProviderServiceKeyName
                };

                response = client.GetFastConnectProviderServiceKey(request).GetAwaiter().GetResult();
                WriteOutput(response, response.FastConnectProviderServiceKey);
                FinishProcessing(response);
            }
            catch (Exception ex)
            {
                TerminatingErrorDuringExecution(ex);
            }
        }

        protected override void StopProcessing()
        {
            base.StopProcessing();
            TerminatingErrorDuringExecution(new OperationCanceledException("Cmdlet execution interrupted"));
        }

        private GetFastConnectProviderServiceKeyResponse response;
    }
}
